/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.mna.client.logging;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import static org.mockito.Matchers.any;
import org.mockito.MockitoAnnotations;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.shared.mna.client.service.LogClient;
import org.springframework.test.util.ReflectionTestUtils;

import ch.qos.logback.classic.Level;
import ch.qos.logback.classic.spi.ILoggingEvent;
import ch.qos.logback.classic.spi.LoggingEvent;

@RunWith(MockitoJUnitRunner.class)
public class MonitoringAlertingAppenderTest {

	@InjectMocks
	private MonitoringAlertingAppender maAppender = new MonitoringAlertingAppender();
	
	@Mock
	private LogClient mnaLogClient;

	
	@Before
	public void setUp() {
		MockitoAnnotations.initMocks(this);
	}
	
	@Test
	public void testMessageLogged() {
		ReflectionTestUtils.setField(maAppender, "logLevel", Level.DEBUG);
		LoggingEvent event = new LoggingEvent();
		event.setLevel(Level.DEBUG);
		event.setLoggerName("My logger Name");
		maAppender.append(event);
		Mockito.verify(mnaLogClient).createLog((ILoggingEvent)any());
	}
	
	@Test
	public void testMessageNotLogged() {
		ReflectionTestUtils.setField(maAppender, "logLevel", Level.ERROR);
		LoggingEvent event = new LoggingEvent();
		event.setLevel(Level.DEBUG);
		event.setLoggerName("My logger Name");
		maAppender.append(event);
		Mockito.verifyZeroInteractions(mnaLogClient);
	}

}
