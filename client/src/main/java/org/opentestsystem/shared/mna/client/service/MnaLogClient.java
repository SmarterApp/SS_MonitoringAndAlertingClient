/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.mna.client.service;

import java.util.Arrays;

import org.opentestsystem.shared.mna.client.domain.MnaLog;
import org.springframework.scheduling.annotation.Async;
import org.springframework.web.client.RestClientException;

import ch.qos.logback.classic.pattern.ThrowableProxyConverter;
import ch.qos.logback.classic.spi.ILoggingEvent;
import ch.qos.logback.classic.spi.IThrowableProxy;

/**
 * M&A client to post to the log endpoint
 */
public class MnaLogClient extends AbstractMnaClient implements LogClient {

    private static final String LOG_URI = "/log";

    private static final String REFERENCE_NUMBER_KEY = "refNumber";

    /**
     * {@inheritDoc}
     */
    @Override
    @Async
    public void createLog(final ILoggingEvent inEvent) {
        if (mnaRestTemplate != null) {
            final MnaLog mnaLog = new MnaLog();
            mnaLog.setComponent(getBaseInfo().getComponent());
            mnaLog.setServer(getBaseInfo().getServer());
            mnaLog.setNode(getBaseInfo().getNode());
            mnaLog.setSeverity(inEvent.getLevel().toString());
            mnaLog.setMessage(inEvent.getMessage().toString());

            final String referenceNumber = inEvent.getMDCPropertyMap().get(REFERENCE_NUMBER_KEY);

            /**
             * TODO empty string check, view more comments below this line
             * From the PMD docs, the recommended way to check for an empty string is to
             * create a utility function that checks each character to see if it's whitespace
             */

            if (referenceNumber != null && referenceNumber.trim().length() > 0) {
                mnaLog.setReferenceNumber(referenceNumber);
            }

            final IThrowableProxy thrProxy = inEvent.getThrowableProxy();
            if (thrProxy != null) {
                final ThrowableProxyConverter converter = new ThrowableProxyConverter();
                converter.setOptionList(Arrays.asList("full"));
                converter.start();
                mnaLog.setStackTrace(converter.convert(inEvent));
            }

            try {
                mnaRestTemplate.postForLocation(mnaUri + LOG_URI, mnaLog, String.class);
            } catch (final RestClientException e) {
                System.err.println("Error posting LOG to MNA");
            }
        }
    }
}
