/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.mna.client.logging;

import java.util.Iterator;


import org.opentestsystem.shared.mna.client.service.LogClient;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.ApplicationContext;

import ch.qos.logback.classic.AsyncAppender;
import ch.qos.logback.classic.Level;
import ch.qos.logback.classic.LoggerContext;
import ch.qos.logback.classic.spi.ILoggingEvent;
import ch.qos.logback.core.Appender;
import ch.qos.logback.core.AppenderBase;

/**
 * Custom Log4J appender that writes log messages to the M&A log endpoint
 */
@SuppressWarnings({ "PMD.AvoidCatchingGenericException", "PMD.AvoidPrintStackTrace", "PMD.SystemPrintln" })
public class MonitoringAlertingAppender extends AppenderBase<ILoggingEvent> {

    /**
     * Log client
     */
    @Autowired
    private LogClient mnaLogClient;
    
    @Value("#{T(ch.qos.logback.classic.Level).toLevel('${mna.logger.level}', T(ch.qos.logback.classic.Level).ERROR)}")
    private Level logLevel;

    /**
     * {@inheritDoc}
     */
    @Override
    protected void append(final ILoggingEvent event) {
        try {
            if (mnaLogClient == null) {
                System.err.println("the M&A appender was not wired correctly (the rest template is null), please fix if this error continues after startup");
            } else {
            	if (event != null && logLevel != null && event.getLevel().isGreaterOrEqual(logLevel)) {
            		mnaLogClient.createLog(event);
            	}
            }
        } catch (Exception e) {
            System.err.println("There was an issue with posting a Log to Monitoring and alerting");
            e.printStackTrace();
        }
    }

    /**
     * Wire up appenders with Spring
     * 
     * @param context
     */
    public static void autowireAppender(final ApplicationContext context) {
        // for root logger
        LoggerContext logContext = (LoggerContext) LoggerFactory.getILoggerFactory();
        ch.qos.logback.classic.Logger rootLogger = logContext.getLogger(ch.qos.logback.classic.Logger.ROOT_LOGGER_NAME);

        setTemplate(context, rootLogger.iteratorForAppenders());
        // and all other loggers
        for (ch.qos.logback.classic.Logger otherLogger : logContext.getLoggerList()) {
            setTemplate(context, otherLogger.iteratorForAppenders());
        }
    }

    /**
     * Wire up appenders with Spring
     * 
     * @param context
     * @param iterator
     */
    private static void setTemplate(final ApplicationContext context, final Iterator<Appender<ILoggingEvent>> iterator) {

        while (iterator.hasNext()) {
            Appender<ILoggingEvent> appender = iterator.next();
            if (appender instanceof MonitoringAlertingAppender) {
                context.getAutowireCapableBeanFactory().autowireBean(appender);
            } else if (appender instanceof AsyncAppender) {
                AsyncAppender aysncAppender = (AsyncAppender) appender;
                // ...weeee recursive
                setTemplate(context, aysncAppender.iteratorForAppenders());
            }
        }
    }

}
