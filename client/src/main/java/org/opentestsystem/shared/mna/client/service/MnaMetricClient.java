/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.mna.client.service;

import org.opentestsystem.shared.mna.client.domain.MnaMetric;
import org.springframework.scheduling.annotation.Async;
import org.springframework.web.client.RestClientException;

/**
 * M&A Metric client
 */
public class MnaMetricClient extends AbstractMnaClient implements MetricClient {

    //private static final Logger LOGGER = LoggerFactory.getLogger(MnaMetricClient.class);

    private static final String METRIC_URI = "/metric";

    /**
     * {@inheritDoc}
     */
    @Override
    @Async
    public void sendPerformanceMetricToMna(final String methodDescription, final long inElapsedTime) {
        sendMetricToMna(MnaMetric.newPerformanceMetric(getBaseInfo(), methodDescription, inElapsedTime));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Runnable getExecuter(final String inMetricName) {
        return new Runnable() {
            @Override
            public void run() {
                sendMetricToMna(MnaMetric.newHealthMetric(getBaseInfo(), inMetricName));
            }
        };
    }

    /**
     * Post a metric
     * 
     * @param metric
     */
    private void sendMetricToMna(final MnaMetric metric) {
        if (getBaseInfo() != null && mnaUri != null) {
            try {
                mnaRestTemplate.postForLocation(mnaUri + METRIC_URI, metric);
            } catch (final RestClientException e) {
                System.err.println("Error posting METRIC to MNA");
            }
        }
    }
}
