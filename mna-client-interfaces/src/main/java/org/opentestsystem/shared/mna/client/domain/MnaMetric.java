/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.mna.client.domain;

/**
 * Simple model object that will marshal appropriately to the MNA metric service
 */

public class MnaMetric extends MnaBase {

    private static final long serialVersionUID = 3307881287126537786L;

    private static final int STRING_BUILDER_SIZE = 65;

    private CategoryType metricType;
    private Number metricValue;
    private String metricName;

    public MnaMetric() {
        super();
    }

    public MnaMetric(final String server, final String node, final String component, final CategoryType inMetricType, final String inMetricName, final Number inMetricValue) {
        super(server, node, component);

        this.metricType = inMetricType;
        this.metricName = inMetricName;
        this.metricValue = inMetricValue;
    }

    public CategoryType getMetricType() {
        return metricType;
    }

    public void setMetricType(final CategoryType inMetricType) {
        this.metricType = inMetricType;
    }

    public Number getMetricValue() {
        return metricValue;
    }

    public void setMetricValue(final Number inMetricValue) {
        this.metricValue = inMetricValue;
    }

    public String getMetricName() {
        return metricName;
    }

    public void setMetricName(final String inMetricName) {
        this.metricName = inMetricName;
    }

    @Override
    public String toString() {
        StringBuilder sbuilder = new StringBuilder(STRING_BUILDER_SIZE);

        sbuilder.append("Metric: [metricType = ");
        sbuilder.append(metricType);
        sbuilder.append(", metricValue = ");
        sbuilder.append(metricValue);
        sbuilder.append(", metricName = ");
        sbuilder.append(metricName);
        sbuilder.append('\n');
        sbuilder.append(super.toString());
        sbuilder.append(" ]\n");

        return sbuilder.toString();
    }

    /**
     * Static convenience method used to create a performance metric through the client
     * 
     * @param metricTemplate
     * @param methodDescription
     * @param inElapsedTime
     * @return
     */
    public static MnaMetric newPerformanceMetric(final MnaBase metricTemplate, final String methodDescription, final long inElapsedTime) {
        return new MnaMetric(metricTemplate.getServer(), metricTemplate.getNode(), metricTemplate.getComponent(), CategoryType.PERFORMANCE, methodDescription, inElapsedTime);
    }

    /**
     * Static convenience method used to create a health metric through the client
     * 
     * @param metricTemplate
     * @param inMetricName
     * @return
     */
    public static MnaMetric newHealthMetric(final MnaBase metricTemplate, final String inMetricName) {
        return new MnaMetric(metricTemplate.getServer(), metricTemplate.getNode(), metricTemplate.getComponent(), CategoryType.AVAILABILITY, inMetricName, 1);
    }
}
